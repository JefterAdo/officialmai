<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CommuniqueResource\Pages;
use App\Models\Communique;
use Filament\Forms;
use Filament\Forms\Form;
use Livewire\TemporaryUploadedFile;
use Livewire\TemporaryUploadedFile;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class CommuniqueResource extends Resource
{
    protected static ?string $model = Communique::class;

    protected static ?string $navigationIcon = 'heroicon-o-megaphone';

    protected static ?string $navigationGroup = 'Médiathèque';

    protected static ?string $navigationLabel = 'Communiqués';

    protected static ?int $navigationSort = 1;

    protected static ?string $modelLabel = 'Communiqué';

    protected static ?string $pluralModelLabel = 'Communiqués';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Informations du communiqué')
                    ->schema([
                        Forms\Components\TextInput::make('title')
                            ->required()
                            ->maxLength(255)
                            ->live(onBlur: true)
                            ->afterStateUpdated(function ($get, $set, ?string $state) {
                                if (!$get('id')) {
                                    $set('slug', Str::slug($state));
                                }
                            })
                            ->label('Titre du communiqué'),

                        Forms\Components\TextInput::make('slug')
                            ->required()
                            ->maxLength(255)
                            ->unique(ignoreRecord: true)
                            ->label('URL personnalisée'),

                        Forms\Components\RichEditor::make('content')
                            ->columnSpanFull()
                            ->fileAttachmentsDisk('public')
                            ->fileAttachmentsDirectory('communiques/attachments')
                            ->toolbarButtons([
                                'blockquote',
                                'bold',
                                'bulletList',
                                'codeBlock',
                                'h2',
                                'h3',
                                'italic',
                                'link',
                                'orderedList',
                                'redo',
                                'strike',
                                'underline',
                                'undo',
                                'attachFiles',
                            ])
                            ->extraAttributes(['style' => 'min-height: 24rem;'])
                            ->label('Contenu détaillé'),

                        Forms\Components\(new Forms\Components\Fieldset('Fichiers du communiqué'))
                            ->schema([
                                Forms\Components\FileUpload::make('attachments')
                                    ->label('')
                                    ->multiple()
                                    ->maxFiles(4)
                                    ->directory('communiques/documents')
                                    ->acceptedFileTypes([
                                        'application/pdf',
                                        'image/jpeg',
                                        'image/png',
                                        'image/gif',
                                        'application/msword',
                                        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                                    ])
                                    ->downloadable()
                                    ->openable()
                                    ->maxSize(10240) // 10MB par fichier
                                    ->helperText('Formats acceptés : PDF, JPG, PNG, GIF, DOC, DOCX. Taille max : 10MB par fichier. Max 4 fichiers.')
                                    ->reorderable()
                                    ->appendFiles()
                                    ->preserveFilenames()
                                    ->saveUploadedFileUsing(function (TemporaryUploadedFile $file, $get, $set) {
                                        $path = $file->store('communiques/documents', 'public');
                                        
                                        // La pièce jointe sera sauvegardée après la création du communiqué
                                        // via la méthode afterCreate du CreateCommunique
                                        
                                        return $file->getClientOriginalName();
                                    })
                            ])
                            ->columns(1),

                        Forms\Components\DateTimePicker::make('published_at')
                            ->label('Date de publication')
                            ->default(now())
                            ->required(),

                        Forms\Components\Toggle::make('is_published')
                            ->label('Publié')
                            ->default(true)
                            ->inline(false),
                    ])
                    ->columns(2)
                    ->columnSpan(['lg' => fn (?Communique $record) => $record === null ? 3 : 2]),

                Forms\Components\Section::make('Métadonnées')
                    ->schema([
                        Forms\Components\Placeholder::make('created_at')
                            ->label('Créé le')
                            ->content(fn (Communique $record): ?string => $record->created_at?->diffForHumans()),

                        Forms\Components\Placeholder::make('updated_at')
                            ->label('Modifié le')
                            ->content(fn (Communique $record): ?string => $record->updated_at?->diffForHumans()),

                        Forms\Components\Placeholder::make('download_count')
                            ->label('Téléchargements')
                            ->content(fn (Communique $record): string => number_format($record->download_count, 0, ',', ' ')),
                    ])
                    ->columnSpan(['lg' => 1])
                    ->hidden(fn (?Communique $record) => $record === null),
            ])
            ->columns(3);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable()
                    ->label('Titre')
                    ->limit(50),

                Tables\Columns\TextColumn::make('published_at')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->label('Date de publication'),

                Tables\Columns\IconColumn::make('is_published')
                    ->boolean()
                    ->sortable()
                    ->label('Publié'),

                Tables\Columns\TextColumn::make('file_type')
                    ->badge()
                    ->formatStateUsing(fn (string $state): string => strtoupper($state))
                    ->color(fn (string $state): string => match ($state) {
                        'pdf' => 'danger',
                        'doc', 'docx' => 'primary',
                        'jpg', 'jpeg', 'png', 'gif' => 'success',
                        default => 'gray',
                    })
                    ->label('Type de fichier'),

                Tables\Columns\TextColumn::make('download_count')
                    ->numeric()
                    ->sortable()
                    ->label('Téléchargements'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('is_published')
                    ->options([
                        '1' => 'Publiés',
                        '0' => 'Non publiés',
                    ])
                    ->label('Statut'),

                Tables\Filters\TrashedFilter::make(),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\ForceDeleteBulkAction::make(),
                    Tables\Actions\RestoreBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            // Le gestionnaire de relation sera automatiquement détecté
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCommuniques::route('/'),
            'create' => Pages\CreateCommunique::route('/create'),
            'view' => Pages\ViewCommunique::route('/{record}'),
            'edit' => Pages\EditCommunique::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
}